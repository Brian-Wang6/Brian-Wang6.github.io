<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Bitwise Operation (按位运算)</title>
    <url>/Bitwise-Operation-%E6%8C%89%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
    <content><![CDATA[<h3 id="按位与运算-AND-amp"><a href="#按位与运算-AND-amp" class="headerlink" title="按位与运算 (AND): &amp;"></a>按位与运算 (AND): &amp;</h3><p>参加运算的两个数据，按二进制位进行与运算。当相应位都是1时，结果才为1。<br>例如：3&amp;5<br>&emsp;即 0000 0011 &amp; 0000 0101 = 0000 0001 因此， 结果为1。<br>需要注意的是，负数按补码形式参加按位与运算。<br>与运算的用途：</p>
<ol>
<li>清零。如果想将一个单元清零，只要与一个各位都为零的数相与，结果都为零。</li>
<li>取一个数值X的指定位<br>另取一个数，对应X要取得位，该位为1，其余位为零，与X进行与运算可以得到X中的指定位。<br>例如：X = 1010 1110<br>&emsp;要取X的低四位，用 X &amp; 0000 1111 = 0000 1110即可得到。</li>
</ol>
<a id="more"></a>

<h3 id="按位或运算-OR"><a href="#按位或运算-OR" class="headerlink" title="按位或运算 (OR): |"></a>按位或运算 (OR): |</h3><p>参加运算的两个对象，按二进制位进行或运算。参加运算的两个对象只要有一个为1，其值为1。<br>例如：3|5<br>&emsp;即 0000 0011 | 0000 0101 = 0000 0111 因此，3|5的值为7。<br>需要注意的是，负数按补码的形式参加按位或运算。<br>或运算的用途：</p>
<ol>
<li>常用来对一个数据的某些位换为1<br>例如：将X=1010 0000的低四位置1，用X| 0000 1111 = 1010 1111即可得到。</li>
</ol>
<h3 id="按位异或运算-XOR"><a href="#按位异或运算-XOR" class="headerlink" title="按位异或运算 (XOR): ^"></a>按位异或运算 (XOR): ^</h3><p>参加运算的两个数据，按二进制位进行异或运算。<br>运算规则：0^0=0；0^1=1；1^0=1；1^1=0；<br>即：参加运算的两个对象，如果两个相应位为“异”（值不同），则该位结果为1，否则为0。<br>异或运算的特殊作用：</p>
<ol>
<li>使特定位翻转找一个数，对应X要翻转的各位，该数的对应位为1，其余位为零，此数与X对应位异或即可。<br>例：X=10101110，使X低4位翻转，用X ^ 0000 1111 = 1010 0001即可得到。</li>
<li>与0相异或，保留原值，X ^ 0000 0000 = 1010 1110。</li>
</ol>
<h3 id="按位取反运算-NOT"><a href="#按位取反运算-NOT" class="headerlink" title="按位取反运算 (NOT): ~"></a>按位取反运算 (NOT): ~</h3><p>参加运算的一个数据，按二进制位进行“取反”运算。<br>运算规则：~1=0；   ~0=1；即：对一个二进制数按位取反，即将0变1，1变0。<br>按位取反的用途：</p>
<ol>
<li>使一个数的最低位为零，可以表示为：a&amp;~1。~1的值为1111111111111110，再按“与”运算，最低位一定为0。因为“~”运算符的优先级比算术运算符、关系运算符、逻辑运算符和其他运算符都高。</li>
</ol>
<h3 id="移位运算-Bit-Shift-lt-lt-gt-gt"><a href="#移位运算-Bit-Shift-lt-lt-gt-gt" class="headerlink" title="移位运算 (Bit Shift): &lt;&lt;, &gt;&gt;"></a>移位运算 (Bit Shift): &lt;&lt;, &gt;&gt;</h3><ol>
<li>左移运算符 (&lt;&lt;)<br>将一个运算对象的各二进制位全部左移若干位（左边的二进制位丢弃，右边补0）。<br>例：a = a &lt;&lt; 2 将a的二进制位左移2位，右补0，<br>左移1位后a = a * 2;<br>若左移时舍弃的高位不包含1，则每左移一位，相当于该数乘以2。</li>
<li>右移运算符 (&gt;&gt;)<br>将一个数的各二进制位全部右移若干位，正数左补0，负数左补1，右边丢弃。<br>操作数每右移一位，相当于该数除以2。<br>例如：a = a &gt;&gt; 2 将a的二进制位右移2位，<br>左补0 or 补1 得看被移数是正还是负。</li>
</ol>
]]></content>
      <categories>
        <category>Computer Foundation</category>
      </categories>
      <tags>
        <tag>Bitwise Operation</tag>
        <tag>按位运算</tag>
        <tag>位运算</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux命令</title>
    <url>/Linuxx%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<ol>
<li>echo<br>用来将字符串输出到终端上，通常在shell脚本和批处理中使用，以将状态信息输出到屏幕或文件中。<br><code>echo it is a test</code>输出为<code>it is a test</code>。</li>
<li>touch<br>Linux touch命令用于修改文件或者目录的时间属性，包括存取时间和更改时间。若文件不存在，系统会建立一个新的文件。<br>ls -l 可以显示档案的时间记录。<br><code>touch testfile    #修改文件的时间属性为当前系统时间，如果文件不存在则生成文件</code></li>
</ol>
<a id="more"></a>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>command</tag>
        <tag>shell</tag>
        <tag>命令</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown Syntax</title>
    <url>/Markdown-Syntax/</url>
    <content><![CDATA[<h3 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h3><p>Since I will start my blog from today, markdown syntax is quite important to draft blogs. I searched online and found that there is a blog that indicate the basic usage of the syntax and it’s easy to understand. The link is as below:</p>
<p><strong><a href="https://www.jianshu.com/p/191d1e21f7ed">Basic Usage</a></strong></p>
<a id="more"></a>

<h3 id="怎么打出tab键，空行和空格键"><a href="#怎么打出tab键，空行和空格键" class="headerlink" title="怎么打出tab键，空行和空格键"></a>怎么打出tab键，空行和空格键</h3><p>空格: <code>&amp;nbsp;</code>    tab: <code>&amp;emsp;</code><br>示例:<br>你&nbsp;好&emsp;啊<br>在代码块中，直接用tab键即可。</p>
]]></content>
      <categories>
        <category>Common Sense</category>
      </categories>
      <tags>
        <tag>Markdown Syntax</tag>
        <tag>Markdown语法</tag>
      </tags>
  </entry>
  <entry>
    <title>Makefile Tutorial</title>
    <url>/Makefile-Tutorial/</url>
    <content><![CDATA[<h2 id="有一篇总结的非常全面的文章：Makefile运用"><a href="#有一篇总结的非常全面的文章：Makefile运用" class="headerlink" title="有一篇总结的非常全面的文章：Makefile运用"></a>有一篇总结的非常全面的文章：<a href="https://seisman.github.io/how-to-write-makefile/introduction.html">Makefile运用</a></h2><h3 id="一，显式规则"><a href="#一，显式规则" class="headerlink" title="一，显式规则"></a>一，显式规则</h3><ol>
<li>目标文件:依赖文件<br>&emsp;指令文件<br>example:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a. hello.i : hello.c</span><br><span class="line">	gcc -E hello.c -o hello.i	预处理</span><br><span class="line">b. hello.S : hello.i</span><br><span class="line">	gcc -S hello.i -o hello.S	编译</span><br><span class="line">c. hello.o : hello.S</span><br><span class="line">	gcc -c hello.S -o hello.o	汇编</span><br><span class="line">d. hello : hello.o</span><br><span class="line">	gcc hello.o -o hello	链接</span><br></pre></td></tr></table></figure>

</li>
</ol>
<a id="more"></a>
<ol start="2">
<li>第一个目标文件是最终目标<br>所以上述的过程应该反过来，正确书写方式是:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a. hello : hello.o</span><br><span class="line">	gcc hello.o -o hello	链接</span><br><span class="line">b. hello.o : hello.S</span><br><span class="line">	gcc -c hello.S -o hello.o	汇编</span><br><span class="line">c. hello.S : hello.i</span><br><span class="line">	gcc -S hello.i -o hello.S	编译</span><br><span class="line">d. hello.i : hello.c</span><br><span class="line">	gcc -E hello.c -o hello.i	预处理</span><br></pre></td></tr></table></figure></li>
<li>伪目标<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.PHONY:</span><br><span class="line">clear:</span><br><span class="line">	rm -rf hello.o hello.S hello.i</span><br><span class="line">clearall:</span><br><span class="line">	rm -rf hello.o hello.S hello.i hello</span><br></pre></td></tr></table></figure>
伪目标通常用来做一些清理或删除文件。其中clear和clearall名字可以任意更换，为了便于理解和记忆，要用一些有意义的词。<br>举例用circle.c, circle.h, cube.c, cube.h, main.c, main.h 生成可执行文件test，省去中间过程。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">test: circle.o cube.o main.o</span><br><span class="line">	gcc circle.o cube.o main.o -o test</span><br><span class="line">circle.o: circle.c</span><br><span class="line">	gcc -c circle.c -o circle.o</span><br><span class="line">cube.o: cube.c</span><br><span class="line">	gcc -c cube.c -o cube.o</span><br><span class="line">main.o: main.c</span><br><span class="line">	gcc -c main.c -o main.o</span><br><span class="line">.PHONY:</span><br><span class="line">clearall:</span><br><span class="line">	rm -rf circle.o cube.o main.o test</span><br><span class="line">clear:</span><br><span class="line">	rm -rf circle.o cube.o main.o</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="二，变量"><a href="#二，变量" class="headerlink" title="二，变量"></a>二，变量</h3><p>变量只能是strings。替换：<code>=</code>, 追加：<code>+=</code>, 恒等于：<code>:=</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TAR &#x3D; test</span><br><span class="line">OBJ &#x3D; circle.o cube.o main.o</span><br><span class="line">CC :&#x3D; gcc</span><br><span class="line">RM :&#x3D; rm -rf</span><br><span class="line">$(TAR): $(OBJ)</span><br><span class="line">	$(CC) $(OBJ) -o $(TAR)</span><br><span class="line">circle.o: circle.c</span><br><span class="line">	$(CC) -c circle.c -o circle.o</span><br><span class="line">cube.o: cube.c</span><br><span class="line">	$(CC) -c cube.c -o cube.o</span><br><span class="line">main.o: main.c</span><br><span class="line">	$(CC) -c main.c -o main.o</span><br><span class="line">.PHONY:</span><br><span class="line">clearall:</span><br><span class="line">	$(RM) circle.o cube.o main.o test</span><br><span class="line">clear:</span><br><span class="line">	$(RM) circle.o cube.o main.o</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Makefile</tag>
        <tag>gcc</tag>
        <tag>g++</tag>
      </tags>
  </entry>
  <entry>
    <title>两种定义字符串的区别</title>
    <url>/%E4%B8%A4%E7%A7%8D%E5%AE%9A%E4%B9%89%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p>下面两种定义字符串之间有很大的区别：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">char amessage[ ] &#x3D; &quot;Hello world&quot;;	&#x2F;&#x2F;定义一个字符串数组</span><br><span class="line">char *pmessage &#x3D; &quot;Hello world&quot;;	&#x2F;&#x2F;定义一个指针</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>amessage是一个仅仅足以存放初始化字符串以及空字符’\0’的一维数组。<strong>数组中的单个字符可以进行修改</strong>，但amessage始终指向同一个存储位置。另一方面，pmessage是一个指针，其初值指向一个字符串常量，之后它可以被修改以指向其他地址，但如果试图修改字符串的内容，结果是没有定义的。参见下图：<br><img src="../picture/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AE%9A%E4%B9%89%E5%8C%BA%E5%88%AB.png"></p>
]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>string</tag>
        <tag>字符串</tag>
        <tag>指针</tag>
        <tag>pointer</tag>
      </tags>
  </entry>
  <entry>
    <title>关于C程序设计语言中5.3节中strlen函数不改变原函数中的字符串的解释</title>
    <url>/%E5%85%B3%E4%BA%8EC%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80%E4%B8%AD5-3%E8%8A%82%E4%B8%ADstrlen%E5%87%BD%E6%95%B0%E4%B8%8D%E6%94%B9%E5%8F%98%E5%8E%9F%E5%87%BD%E6%95%B0%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E8%A7%A3%E9%87%8A/</url>
    <content><![CDATA[<p>在C程序设计语言中5.3节，有一个strlen函数的另一个版本，具体如下图：<br><img src="../picture/strlen%E5%87%BD%E6%95%B0.png" alt="代码"></p>
<a id="more"></a>

<p>该strlen函数会求得字符串的长度并返回但并不修改原函数中的字符串。一开始并不理解，因为s指针进行自增运算后指针的位置变了所以原函数中的字符串应该改变才对。<br>最后想明白了， s++相当于s = s + 1; 此时，s是原s指针的副本，然后对私有副本进行自增运算，而原来的s指针并没有改变，所以才不会改变原函数中字符串。</p>
]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>C语言</tag>
        <tag>C程序设计语言</tag>
      </tags>
  </entry>
  <entry>
    <title>在结构体中使用vector，如何初始化结构体</title>
    <url>/%E5%9C%A8%E7%BB%93%E6%9E%84%E4%BD%93%E4%B8%AD%E4%BD%BF%E7%94%A8vector%EF%BC%8C%E5%A6%82%E4%BD%95%E5%88%9D%E5%A7%8B%E5%8C%96%E7%BB%93%E6%9E%84%E4%BD%93/</url>
    <content><![CDATA[<p>在优化基于gstreamer架构的网络摄像头应用时，为了方便添加属性，我使用了struct。具体struct定义如下，定义了struct cache_data，其中包含了两个int类型的变量，一个vector容器。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct cache_data</span><br><span class="line">&#123;</span><br><span class="line">  int time;</span><br><span class="line">  int detect_frame;</span><br><span class="line">  vector&lt;vector&lt;float&gt;&gt; res_keep;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>但在我具体使用这个结构体的时候，对vector的赋值出现问题。原始代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cache_data *boxes_cache &#x3D; (cache_data *)malloc(sizeof(cache_data));</span><br><span class="line">boxes_cache -&gt; time &#x3D; 0;</span><br><span class="line">boxes_cache -&gt; res_keep &#x3D; vector&lt;vector&lt;float&gt;&gt;();	&#x2F;&#x2F;发生错误，segmentation fault</span><br></pre></td></tr></table></figure>
<p>运行到对结构体中的容器初始化就会产生段错误，所以推测内存错误。之后查资料以后得知，malloc没有调用vector的构造函数，所以vector的内存没分配。<br>此时可以使用new，这个运算符会自己完成malloc，结构体构造，错误检查等工作。容器的容量是会在使用中自适应调整的，不要去malloc一块地方。<br>改正后的可运行代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cache_data *boxes_cache &#x3D; new cache_data;</span><br><span class="line">boxes_cache-&gt;time &#x3D; 0;</span><br><span class="line">boxes_cache-&gt;res_keep &#x3D; vector&lt;vector&lt;float&gt;&gt;();</span><br></pre></td></tr></table></figure>
<p>在网上查到malloc和new的区别：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">malloc&#x2F;new和free&#x2F;delete</span><br><span class="line">1. malloc和free是标准库函数，支持覆盖；new和delete是运算符，并且支持重载。</span><br><span class="line">2. malloc仅仅分配内存空间，free仅仅回收空间，不具备调用构造函数和析构函数功能，用malloc分配空间存储类的对象存在风险；3. new和delete除了分配回收功能外，还会调用构造函数和析构函数。</span><br><span class="line">4. malloc和free返回的是void类型指针（必须进行类型转换），new和delete返回的是具体类型指针。</span><br><span class="line">5. free和delete对应。当delete一个对象数组时，delete只删除了一个，需要使用delete[]。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>vector</tag>
        <tag>struct</tag>
      </tags>
  </entry>
  <entry>
    <title>练习2.9 在求对二的补码时，表达式 x &amp;= (x - 1) 可以删除 x 中最右边值为 1 的一个二进制位，请解释这样做的道理。用这一方法重写bitcount函数，以加快其执行速度。</title>
    <url>/%E7%BB%83%E4%B9%A02-9-%E5%9C%A8%E6%B1%82%E5%AF%B9%E4%BA%8C%E7%9A%84%E8%A1%A5%E7%A0%81%E6%97%B6%EF%BC%8C%E8%A1%A8%E8%BE%BE%E5%BC%8F-x-x-1-%E5%8F%AF%E4%BB%A5%E5%88%A0%E9%99%A4-x-%E4%B8%AD%E6%9C%80%E5%8F%B3%E8%BE%B9%E5%80%BC%E4%B8%BA-1-%E7%9A%84%E4%B8%80%E4%B8%AA%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%BD%8D%EF%BC%8C%E8%AF%B7%E8%A7%A3%E9%87%8A%E8%BF%99%E6%A0%B7%E5%81%9A%E7%9A%84%E9%81%93%E7%90%86%E3%80%82%E7%94%A8%E8%BF%99%E4%B8%80%E6%96%B9%E6%B3%95%E9%87%8D%E5%86%99bitcount%E5%87%BD%E6%95%B0%EF%BC%8C%E4%BB%A5%E5%8A%A0%E5%BF%AB%E5%85%B6%E6%89%A7%E8%A1%8C%E9%80%9F%E5%BA%A6%E3%80%82/</url>
    <content><![CDATA[<p>题目分析：题目说可以删除x中最右边的值为1的一个二进制位，不是当x最右边一位为1时，删除这一位，而是说，将x中从右边数第一个为1的二进制位变成0。<br>具体分析如下图：</p>
<a id="more"></a>
<p><img src="../picture/practice_2_9.png" alt="题目分析"></p>
<p>参考代码实现：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int bitcount(unsigned x)</span><br><span class="line">&#123;</span><br><span class="line">	int b &#x3D; 0;</span><br><span class="line">	while (x !&#x3D; 0)</span><br><span class="line">	&#123;</span><br><span class="line">		x &amp;&#x3D; x - 1;</span><br><span class="line">		b++;</span><br><span class="line">	&#125;</span><br><span class="line">	return b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	unsigned x &#x3D; 8;</span><br><span class="line">	int n;</span><br><span class="line">	n &#x3D; bitcount(x);</span><br><span class="line">	printf(&quot;%d\n&quot;, n);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>Bitwise Operation</tag>
        <tag>按位运算</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>练习2.6 编写一个函数setbits(x, p ,n, y)，该函数返回对x执行下列操作后的结果值: 将x中从第p位开始的n个(二进制)位设置为y中最右边n位的值，x的其余各位保持不变。</title>
    <url>/%E7%BB%83%E4%B9%A02-6-%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0setbits-x-p-n-y-%EF%BC%8C%E8%AF%A5%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E5%AF%B9x%E6%89%A7%E8%A1%8C%E4%B8%8B%E5%88%97%E6%93%8D%E4%BD%9C%E5%90%8E%E7%9A%84%E7%BB%93%E6%9E%9C%E5%80%BC-%E5%B0%86x%E4%B8%AD%E4%BB%8E%E7%AC%ACp%E4%BD%8D%E5%BC%80%E5%A7%8B%E7%9A%84n%E4%B8%AA-%E4%BA%8C%E8%BF%9B%E5%88%B6-%E4%BD%8D%E8%AE%BE%E7%BD%AE%E4%B8%BAy%E4%B8%AD%E6%9C%80%E5%8F%B3%E8%BE%B9n%E4%BD%8D%E7%9A%84%E5%80%BC%EF%BC%8Cx%E7%9A%84%E5%85%B6%E4%BD%99%E5%90%84%E4%BD%8D%E4%BF%9D%E6%8C%81%E4%B8%8D%E5%8F%98%E3%80%82/</url>
    <content><![CDATA[<p>题目分析：<br>X: xxx…xnnnx…xxx<br>Y: yy…………..ynnn<br>要变成这样的效果，我们需要对x中n位清零，把y中最右边n位以外的位都清零并左移到第p位处，然后进行or操作。</p>
<p>xxx….x000x…xxx | 000… nnn….000</p>
<a id="more"></a>
<hr>
<ol>
<li>对x中n位清零: 这里想到与运算，x中n位与零相与n位得到0，其余位与1相与（这样可以保持其他位不变）。<br>~（~0&lt;&lt; n）: 得到最低n位为1，其余各位为0的位串信息：000……111。<br>将~（~0&lt;&lt; n）左移(p+1-n) 位得到 000..01110…000，然后取反得到 111…10001111，最后与x相与可得到 xxx…x000x…xxx</li>
<li>对y处理:<br>运用~（~0&lt;&lt; n）: 得到最低n位为1，其余各位为0的位串信息：000……111。然后与y相与得到 000……0nnn，最后左移(p+1-n) 得到 000…nnn….000</li>
</ol>
<p>代码如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* setbits : set n bits of x at position p with bits of y *&#x2F;</span><br><span class="line">unsigned setbits ( unsigned x, int p, int n, unsigned y)</span><br><span class="line">&#123;</span><br><span class="line">	return x &amp;~(~(~0&lt;&lt; n) &lt;&lt; (p + 1 -n)) | (y &amp; ~(~0 &lt;&lt;n )) &lt;&lt; (p + 1 - n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>Bitwise Operation</tag>
        <tag>按位运算</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>软件设计模式的种类</title>
    <url>/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E7%A7%8D%E7%B1%BB/</url>
    <content><![CDATA[<h3 id="软件设计模式的种类"><a href="#软件设计模式的种类" class="headerlink" title="软件设计模式的种类"></a>软件设计模式的种类</h3><p>创建型模式：如何创建对象；（<strong>单例模式</strong>，<strong>工厂方法模式</strong>，<strong>抽象工厂模式</strong>，<strong>简单工厂模式</strong>，原型模式，建造者模式）</p>
<a id="more"></a>
<p>结构型模式：如何实现类或对象的组合；（<strong>适配器模式</strong>，<strong>外观模式</strong>，<strong>装饰模式</strong>，<strong>代理模式</strong>，桥接模式，组合模式，享元模式）<br>行为型模式：类或对象怎样交互以及怎样分配职责。（<strong>观察者模式</strong>，<strong>模板方法模式</strong>，<strong>策略模式</strong>，<strong>命令模式</strong>，状态模式，中介者模式，备忘录模式，迭代器模式，解释器模式）</p>
]]></content>
      <categories>
        <category>Design Pattern</category>
      </categories>
      <tags>
        <tag>设计模式种类</tag>
        <tag>design pattern types</tag>
      </tags>
  </entry>
</search>
