<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Bitwise Operation (按位运算)</title>
    <url>/Bitwise-Operation-%E6%8C%89%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
    <content><![CDATA[<h3 id="按位与运算-AND-amp"><a href="#按位与运算-AND-amp" class="headerlink" title="按位与运算 (AND): &amp;"></a>按位与运算 (AND): &amp;</h3><p>参加运算的两个数据，按二进制位进行与运算。当相应位都是1时，结果才为1。<br>例如：3&amp;5<br>&emsp;即 0000 0011 &amp; 0000 0101 = 0000 0001 因此， 结果为1。<br>需要注意的是，负数按补码形式参加按位与运算。<br>与运算的用途：</p>
<ol>
<li>清零。如果想将一个单元清零，只要与一个各位都为零的数相与，结果都为零。</li>
<li>取一个数值X的指定位<br>另取一个数，对应X要取得位，该位为1，其余位为零，与X进行与运算可以得到X中的指定位。<br>例如：X = 1010 1110<br>&emsp;要取X的低四位，用 X &amp; 0000 1111 = 0000 1110即可得到。</li>
</ol>
<a id="more"></a>

<h3 id="按位或运算-OR"><a href="#按位或运算-OR" class="headerlink" title="按位或运算 (OR): |"></a>按位或运算 (OR): |</h3><p>参加运算的两个对象，按二进制位进行或运算。参加运算的两个对象只要有一个为1，其值为1。<br>例如：3|5<br>&emsp;即 0000 0011 | 0000 0101 = 0000 0111 因此，3|5的值为7。<br>需要注意的是，负数按补码的形式参加按位或运算。<br>或运算的用途：</p>
<ol>
<li>常用来对一个数据的某些位换为1<br>例如：将X=1010 0000的低四位置1，用X| 0000 1111 = 1010 1111即可得到。</li>
</ol>
<h3 id="按位异或运算-XOR"><a href="#按位异或运算-XOR" class="headerlink" title="按位异或运算 (XOR): ^"></a>按位异或运算 (XOR): ^</h3><p>参加运算的两个数据，按二进制位进行异或运算。<br>运算规则：0^0=0；0^1=1；1^0=1；1^1=0；<br>即：参加运算的两个对象，如果两个相应位为“异”（值不同），则该位结果为1，否则为0。<br>异或运算的特殊作用：</p>
<ol>
<li>使特定位翻转找一个数，对应X要翻转的各位，该数的对应位为1，其余位为零，此数与X对应位异或即可。<br>例：X=10101110，使X低4位翻转，用X ^ 0000 1111 = 1010 0001即可得到。</li>
<li>与0相异或，保留原值，X ^ 0000 0000 = 1010 1110。</li>
</ol>
<h3 id="按位取反运算-NOT"><a href="#按位取反运算-NOT" class="headerlink" title="按位取反运算 (NOT): ~"></a>按位取反运算 (NOT): ~</h3><p>参加运算的一个数据，按二进制位进行“取反”运算。<br>运算规则：~1=0；   ~0=1；即：对一个二进制数按位取反，即将0变1，1变0。<br>按位取反的用途：</p>
<ol>
<li>使一个数的最低位为零，可以表示为：a&amp;<del>1。</del>1的值为1111111111111110，再按“与”运算，最低位一定为0。因为“~”运算符的优先级比算术运算符、关系运算符、逻辑运算符和其他运算符都高。</li>
</ol>
<h3 id="移位运算-Bit-Shift-lt-lt-gt-gt"><a href="#移位运算-Bit-Shift-lt-lt-gt-gt" class="headerlink" title="移位运算 (Bit Shift): &lt;&lt;, &gt;&gt;"></a>移位运算 (Bit Shift): &lt;&lt;, &gt;&gt;</h3><ol>
<li>左移运算符 (&lt;&lt;)<br>将一个运算对象的各二进制位全部左移若干位（左边的二进制位丢弃，右边补0）。<br>例：a = a &lt;&lt; 2 将a的二进制位左移2位，右补0，<br>左移1位后a = a * 2;<br>若左移时舍弃的高位不包含1，则每左移一位，相当于该数乘以2。</li>
<li>右移运算符 (&gt;&gt;)<br>将一个数的各二进制位全部右移若干位，正数左补0，负数左补1，右边丢弃。<br>操作数每右移一位，相当于该数除以2。<br>例如：a = a &gt;&gt; 2 将a的二进制位右移2位，<br>左补0 or 补1 得看被移数是正还是负。</li>
</ol>
]]></content>
      <categories>
        <category>Computer Foundation</category>
      </categories>
      <tags>
        <tag>Bitwise Operation</tag>
        <tag>按位运算</tag>
        <tag>位运算</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux命令</title>
    <url>/Linuxx%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<ol>
<li>echo<br>用来将字符串输出到终端上，通常在shell脚本和批处理中使用，以将状态信息输出到屏幕或文件中。<br><code>echo it is a test</code>输出为<code>it is a test</code>。</li>
<li>touch<br>Linux touch命令用于修改文件或者目录的时间属性，包括存取时间和更改时间。若文件不存在，系统会建立一个新的文件。<br>ls -l 可以显示档案的时间记录。<br><code>touch testfile    #修改文件的时间属性为当前系统时间，如果文件不存在则生成文件</code></li>
</ol>
<a id="more"></a>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>command</tag>
        <tag>shell</tag>
        <tag>命令</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown Syntax</title>
    <url>/Markdown-Syntax/</url>
    <content><![CDATA[<h3 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h3><p>Since I will start my blog from today, markdown syntax is quite important to draft blogs. I searched online and found that there is a blog that indicate the basic usage of the syntax and it’s easy to understand. The link is as below:</p>
<p><strong><a href="https://www.jianshu.com/p/191d1e21f7ed">Basic Usage</a></strong></p>
<a id="more"></a>

<h3 id="怎么打出tab键，空行和空格键"><a href="#怎么打出tab键，空行和空格键" class="headerlink" title="怎么打出tab键，空行和空格键"></a>怎么打出tab键，空行和空格键</h3><p>空格: <code>&amp;nbsp;</code>    tab: <code>&amp;emsp;</code><br>示例:<br>你&nbsp;好&emsp;啊<br>在代码块中，直接用tab键即可。</p>
]]></content>
      <categories>
        <category>Common Sense</category>
      </categories>
      <tags>
        <tag>Markdown Syntax</tag>
        <tag>Markdown语法</tag>
      </tags>
  </entry>
  <entry>
    <title>Makefile Tutorial</title>
    <url>/Makefile-Tutorial/</url>
    <content><![CDATA[<h2 id="有一篇总结的非常全面的文章：Makefile运用"><a href="#有一篇总结的非常全面的文章：Makefile运用" class="headerlink" title="有一篇总结的非常全面的文章：Makefile运用"></a>有一篇总结的非常全面的文章：<a href="https://seisman.github.io/how-to-write-makefile/introduction.html">Makefile运用</a></h2><h3 id="一，显式规则"><a href="#一，显式规则" class="headerlink" title="一，显式规则"></a>一，显式规则</h3><ol>
<li>目标文件:依赖文件<br>&emsp;指令文件<br>example:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a. hello.i : hello.c</span><br><span class="line">	gcc -E hello.c -o hello.i	预处理</span><br><span class="line">b. hello.S : hello.i</span><br><span class="line">	gcc -S hello.i -o hello.S	编译</span><br><span class="line">c. hello.o : hello.S</span><br><span class="line">	gcc -c hello.S -o hello.o	汇编</span><br><span class="line">d. hello : hello.o</span><br><span class="line">	gcc hello.o -o hello	链接</span><br></pre></td></tr></table></figure>

</li>
</ol>
<a id="more"></a>
<ol start="2">
<li>第一个目标文件是最终目标<br>所以上述的过程应该反过来，正确书写方式是:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a. hello : hello.o</span><br><span class="line">	gcc hello.o -o hello	链接</span><br><span class="line">b. hello.o : hello.S</span><br><span class="line">	gcc -c hello.S -o hello.o	汇编</span><br><span class="line">c. hello.S : hello.i</span><br><span class="line">	gcc -S hello.i -o hello.S	编译</span><br><span class="line">d. hello.i : hello.c</span><br><span class="line">	gcc -E hello.c -o hello.i	预处理</span><br></pre></td></tr></table></figure></li>
<li>伪目标<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.PHONY:</span><br><span class="line">clear:</span><br><span class="line">	rm -rf hello.o hello.S hello.i</span><br><span class="line">clearall:</span><br><span class="line">	rm -rf hello.o hello.S hello.i hello</span><br></pre></td></tr></table></figure>
伪目标通常用来做一些清理或删除文件。其中clear和clearall名字可以任意更换，为了便于理解和记忆，要用一些有意义的词。<br>举例用circle.c, circle.h, cube.c, cube.h, main.c, main.h 生成可执行文件test，省去中间过程。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">test: circle.o cube.o main.o</span><br><span class="line">	gcc circle.o cube.o main.o -o test</span><br><span class="line">circle.o: circle.c</span><br><span class="line">	gcc -c circle.c -o circle.o</span><br><span class="line">cube.o: cube.c</span><br><span class="line">	gcc -c cube.c -o cube.o</span><br><span class="line">main.o: main.c</span><br><span class="line">	gcc -c main.c -o main.o</span><br><span class="line">.PHONY:</span><br><span class="line">clearall:</span><br><span class="line">	rm -rf circle.o cube.o main.o test</span><br><span class="line">clear:</span><br><span class="line">	rm -rf circle.o cube.o main.o</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="二，变量"><a href="#二，变量" class="headerlink" title="二，变量"></a>二，变量</h3><p>变量只能是strings。替换：<code>=</code>, 追加：<code>+=</code>, 恒等于：<code>:=</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TAR &#x3D; test</span><br><span class="line">OBJ &#x3D; circle.o cube.o main.o</span><br><span class="line">CC :&#x3D; gcc</span><br><span class="line">RM :&#x3D; rm -rf</span><br><span class="line">$(TAR): $(OBJ)</span><br><span class="line">	$(CC) $(OBJ) -o $(TAR)</span><br><span class="line">circle.o: circle.c</span><br><span class="line">	$(CC) -c circle.c -o circle.o</span><br><span class="line">cube.o: cube.c</span><br><span class="line">	$(CC) -c cube.c -o cube.o</span><br><span class="line">main.o: main.c</span><br><span class="line">	$(CC) -c main.c -o main.o</span><br><span class="line">.PHONY:</span><br><span class="line">clearall:</span><br><span class="line">	$(RM) circle.o cube.o main.o test</span><br><span class="line">clear:</span><br><span class="line">	$(RM) circle.o cube.o main.o</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Makefile</tag>
        <tag>gcc</tag>
        <tag>g++</tag>
      </tags>
  </entry>
</search>
